doctype html
html
      include partials/header.pug
      include partials/navbar.pug
      include home.pug

      #codeBuild-controller.portlet.light.tasks-widget.bordered
            #btnTobottom.btn.purple(style="margin: 4px;",onClick="gotoBottom();")
                  i.fa.fa-angle-double-down 
            #btnRedStop.btn.red(style="margin: 4px;") Stop
                  i.fa.fa-stop
            span#timer 00:00 Seconds
      link(rel='stylesheet', type='text/css', href='public/js/loading-bar.css')
      link(type='text/css', rel='stylesheet', href='node_modules/firebaseui/dist/firebaseui.css')
      link(href='public/assets/global/plugins/bootstrap-toastr/toastr.css', rel='stylesheet')
      block script
            script(src='node_modules/firebaseui/dist/firebaseui.js')
            script(src='public/assets/global/plugins/bootstrap-toastr/toastr.js')
            script(src='public/assets/global/plugins/select2/js/select2.full.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/jquery-validation/js/jquery.validate.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/jquery-validation/js/additional-methods.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/bootstrap-wizard/jquery.bootstrap.wizard.min.js', type='text/javascript')
            script(src='public/assets/pages/scripts/form-wizard.min.js', type='text/javascript')
            script(src='public/js/dropzone.js', type='text/javascript')
            script(src="public/assets/global/plugins/codemirror/lib/codemirror.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/javascript/javascript.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/htmlmixed/htmlmixed.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/css/css.js" type="text/javascript")
            script(type='text/javascript', src='public/js/loading-bar.js')
            // RXJS 
            script(src="node_modules/rx/dist/rx.lite.js" type="text/javascript")
            script(src="node_modules/rx-dom/dist/rx.dom.js" type="text/javascript")
            script(src="https://www.gstatic.com/firebasejs/5.0.2/firebase.js")
            script.
                  let _file;
                  let source;
                  Dropzone.options.myAwesomeDropzone = {
                        dictDefaultMessage: "or click here ",
                        autoQueue: true,
                        autoDiscover: false,
                        acceptedFiles: ".zip",
                        init: function() {
                              myDropzone = this; // closure
                              this.on("addedfile", function(file) { 
                                    if (this.files[1]!=null){
                                          this.removeFile(this.files[0]);
                              }
                                    

                              });
                              this.on("sending", function(file, xhr, formData) {
                              
                                    formData.append("id", "uid1");
                                    formData.append("proj", $('#projname').val()+"");
  
                                    
                                    
                                    //formData.append("service", service);

                                    console.log(formData);

                               });

                              
                               this.on("success", function(file,res) {
                                    // create SSE connection to the backend 
                                    source = new EventSource("/api/v1/build/"+`${res.toString()}/${_Username}/${$('#projname').val()+""}/${_audit? "true":"false"}`);
                                    buildFolder =res.toString();
                                    timer();// start clock timer 
                                    // check service 
                                    let service = `1,${_audit? "1":"0"},0` ; 
                                    //show controller 
                                    $('#codeBuild-controller').css("visibility", "visible");
                                    
                                    if(_audit){
                                          //auditmode, chage bar style
                                          $('.code_bar').css("background","red");
                                          $('.code_bar').append("<div style='margin-left: 100px;'>AUDIT MODE</div>");
                                          //$('.code_bar').text($('.code_bar').text()+ "AUDIT MODE");
                                    }

                                    $('#isupload').val(res);
                                    $('#btncontinue').click();
                                    $('#btncontinue').attr("style","visibility:hidden");
                                    $('#btnback').attr("style",'visibility:hidden');
                                   
                                    source.addEventListener('console', function (result) {
                                          buildConsoleLog(result.data,'console');
                                    });
                                    if(!currentBuild)
                                    source.addEventListener('unitID', function (result) {
                                           currentBuild =  result.data.replace(/^"(.*)"$/, '$1'); 
                                          
                                    });

                                     source.addEventListener('err', function (result) {
                                          stopBuild("err");
                                          buildConsoleLog(`<br><br>################################################<br>
                                                            " ${result.data}<br>################################################`,'error');
                                    });
                                     source.addEventListener('end', function (result) {
                                          stopBuild("end");
                                          source.close();
                                          buildConsoleLog(`<br><br>################################################<br>
                                                            " ${result.data}<br>################################################`,'end');
                                          
                                    });
                               });
                               this.on("uploadprogress",function(file, progress, bytesSent) {
                                
                             
                              });

                        },

                        uploadMultiple: false,
                        paramName: "file", // The name that will be used to transfer the file
                        maxFilesize: 50, // MB

                  };
                   var loadTimer,build,currentBuild,buildFolder,_audit = false/*for checkbox*/;
                   let isReportDone = false;
                  let stopBuild= function(state){
                        fetchUserReports(_Username);
                        if(state=="err"){  // tell the prograss to user
                              toastr.info('By Server',"Build Error");
                        }else{
                              toastr.success('By Server',"Audit Complete");
                        }

                        isReportDone =true;
                        clearInterval(loadTimer);
                        $("#btnRedStop").text("report");
                        $("#btnRedStop").css("background-color","green");
                        source.close();
                        clearInterval(t);

                  }
                  $(function() {
                        $('#btnRedStop').bind( "click", function() {
                              let btn = $(this);

                             //check cancel is a users interupt Build?
                              if(source.CLOSED!==source.readyState){
                                toastr.warning('By User',"Canceled Build");
                              }
                              clearInterval(loadTimer);
                              clearInterval(t);
                              //$('#btnRedStop').addClass("disabled");
                              //btn.css("pointer-events", "none");

                              // Load GC report 
                              setTimeout(function (){
                                    // loade report page 
                                    $('#btncontinue').click();
                                    LoadAllGraph(currentBuild);
                                    $('#codeBuild-controller').css("visibility", "hidden");
                                    LoadAudit();
                              }, 1000); 
                        });
                         
                         var i = 0;
                         build = $('#builder');

                         loadTimer = setInterval(function () {
                              (i==4)? i=0: i++;
                              if(build.text().length>13){
                                    build.text("Building");
                              }
                              build.text(build.text()+".");
                              
                              var lasted = $('#builder');
                             
                        }, 1000);
                           
                  });

                  toastr.options = {
                        "closeButton": true,
                        "debug": false,
                        "positionClass": "toast-bottom-right",
                        "onclick": null,
                        "showDuration": "1000",
                        "hideDuration": "1000",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                  }

                  
                  let buildConsoleLog = function(data,state){

                        
                        let  c1 = document.createElement("div");
                        c1.className = "prompt";
                        let d= new Date();
                        c1.innerHTML =`worker@${addZero(d.getHours())}:${addZero(d.getMinutes())}:${addZero(d.getSeconds())} $  `;
                        let  cmd = document.createElement("span");

                        switch(state){
                              case 'console': cmd.setAttribute("style","color:#32c146;");
                                    break;
                              case 'error':  cmd.setAttribute("style","color:#d73a49;padding-top:20px");  
                                    clearInterval(t);
                                    clearInterval(loadTimer);
                                    break;
                              case 'end': 
                                    c1.innerHTML ="";
                                    cmd.setAttribute("style","color:#FFFFF;padding-top:20px");  
                                    clearInterval(loadTimer);
                                    clearInterval(t);
                                    build.text("Build Finished");
                                    $('.bufferload').attr("style","display:none;");
                                    $('#btncontinue').attr("style","display:none");
                                    break;

                        }


                        cmd.innerHTML = (data).toString().replace(/"/g,"");
                        c1.appendChild(cmd);
                              
                        $('.codein_body').append(c1);

                  }

                  let LoadAudit = function(){
                          
                                    if(_audit&isReportDone){
                                          //select audit mode
                                          
                                           $('#Audit').attr("src","/report/"+buildFolder+"/report.html");
                                           $('#Audit_port').css("visibility", "visible");
                                           
                                    }
                                    else{
                                          $('#Audit_port').css("visibility", "hidden");
                                          $('#Audit').css("display", "none");
                                          $('#btnToAudit').addClass("hidden");
                                    }
                            

                  }


                  // etc function
                  function addZero(i) {
                        if (i < 10) {
                              i = "0" + i;
                        }
                        return i;
                        }


                  //timer
                  let    seconds = 0, minutes = 0, hours = 0,t;
                  function add() {
                              seconds++;
                              if (seconds >= 60) {
                                    seconds = 0;
                                    minutes++;
                                    if (minutes >= 60) {
                                          minutes = 0;
                                          hours++;
                                    }
                              }
                              
                              $("#timer").text((hours ? (hours > 9 ? hours : "0" + hours) : "00") + ":" + (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") + ":" + (seconds > 9 ? seconds : "0" + seconds) +" Seconds  ");
                              timer();
                  }
                  function timer() {
                        t = setTimeout(add, 1000);
                  }
                  
                  let LoadAllGraph = function(build_id){
                                          if(!build_id) return console.log("Can't find Build ID");;
                                          window.myLine  = {};let ctx = {};
                                          let logtype = ["mem","ns","os","cs","los","as"];
                                          let logdesc = ["Memory Allocator","New space","Old space","Code space","Large object space","All spaces"]
                                          for(tp in logtype){
                                                ctx[tp] = document.getElementById(logtype[tp]+'Chart').getContext('2d');
                                                console.log(ctx[tp]);
                                                window.myLine[tp] = new Chart(ctx[tp], cfg[tp]);
                                                window.myLine[tp].options.title.text = logdesc[tp];
                                                fetchlog(build_id,window.myLine[tp],logtype[tp]);
                                          }
                                    };
                                                      var color = Chart.helpers.color;
                                                      var cfg = {};

                                                      for(let i = 0 ; i<6;i++){
                                                            cfg[i] = {
                                                                  
                                                                  type: 'line',
                                                                  data: {
                                                                        datasets: [{
                                                                              label: 'Avaliable',
                                                                              backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
                                                                              borderColor: window.chartColors.red,
                                                                              fill: false
                                                                        },{
                                                                              label: 'Used',
                                                                              backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
                                                                              borderColor: window.chartColors.grey,
                                                                              fill: false 
                                                                        
                                                                        }, {
                                                                              label: 'Commited',
                                                                              backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
                                                                              borderColor: window.chartColors.green,
                                                                              fill: false
                                                                        }]
                                                                  },
                                                                  options: {
                                                                        maintainAspectRatio: false,
                                                                        responsive: true,
                                                                        title: {
                                                                              display: true,
                                                                              text: 'Memory Allocator'
                                                                        },
                                                                        scales: {
                                                                              xAxes: [{
                                                                                    type: 'time',
                                                                                    display: true,
                                                                                    scaleLabel: {
                                                                                          display: true,
                                                                                    },
                                                                                    ticks: {
                                                                                          major: {
                                                                                                fontStyle: 'bold',
                                                                                                fontColor: '#FF0000'
                                                                                          }
                                                                                    }
                                                                              }],
                                                                              yAxes: [{
                                                                                    ticks: {
                                                                                          beginAtZero: true,
                                                                                          // Include Unit 
                                                                                          callback: function(value, index, values) {
                                                                                                return  niceBytes(value);
                                                                                          }
                                                                                    },	
                                                                                    display: true,
                                                                                    scaleLabel: {
                                                                                          display: true,
                                                                                          labelString: "Size"
                                                                                          }
                                                                              }
                                                                        ]
                                                                        }
                                                                  }
                                                            
                                                            };}
                                                            const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

                                                                  function niceBytes(x){
                                                                        let l = 0, n = parseInt(x, 10) || 0;

                                                                        while(n >= 1024 && ++l)
                                                                              n = n/1024;
                                                                        return(n.toFixed(n >= 10 || l < 1 ? 0 : 1) + ' ' + units[l]);
                                                                  }
                                                

                  let fetchlog = function(Build,graph,type){
                        let BuildID=Build;
                        let graphObj =graph;
                        let cTimeStamp="2000-05-21T10:25:42.680Z";// check to not regression graph
                        //mem
                        console.log(BuildID);
                        Rx.DOM.ajax({ url: `/api/v1/reports/${BuildID}/${type}`, responseType: 'json'})
                              .subscribe(
                                    function (data) {
                                          data.response.forEach(function (log) {
                                                      if (cTimeStamp<log.TimeStamp){
                                                      graphObj.data.datasets[0].data.push({
                                                                        x: log.TimeStamp,
                                                                        y: log.available,
                                                      });
                                                      
                                                      graphObj.data.datasets[1].data.push({
                                                                        x: log.TimeStamp,
                                                                        y: log.used,
                                                      });
                                                      graphObj.data.datasets[2].data.push({
                                                                        x: log.TimeStamp,
                                                                        y: log.committed,
                                                      });
                              
                                                cTimeStamp =log.TimeStamp;
                                                }
                                          });
                                          try{
                                                graphObj.update();
                                          }catch(e){

                                          };
                                    },
                                    function (error) {
                                    // Log the error
                                    console.log(error);
                                    }
                              );
                        }
                  let gotoBottom = function(){
                        $('html,body').animate({scrollTop: document.body.scrollHeight},"slow");
                  }

                  let scrollToID = function(divID){
                        $('html, body').animate({
                                    scrollTop: $("#"+divID).offset().top-30
                              }, 1000);
                  }
                  let fetchUserReports = function(user_id){
                              $('.list-items').empty();
                              Rx.DOM.ajax({ url: `/api/v1/user/${user_id}/reports`, responseType: 'json'})
                              .subscribe(
                                    function (data) {
                                          data.response.forEach(function (unitTest) {


                                                            let audit = unitTest.audit;
                                                            let unitTest_id =  unitTest._id;
                                                            let buildPath = unitTest.path;
                                                            let ts =  unitTest.TimeStamp;
                                                            let projectname =  unitTest.proj_name;
                                                            appendSidebar(audit,projectname,unitTest_id,buildPath,user_id,ts);
                                                }
                                          );
                                          //sort form new to old 
                                          $("ul .feeds").children().each(function() {
                                                $(this).parent().prepend(this);
                                          });
                                          $('#feedsBadge').text($(".feeds").children().length);
                                    },
                                    function (error) {
                                    // Log the error
                                    console.log(error);
                                    }
                              );
                        }

                  
                  let appendSidebar = function(isAudit,projectname,unitTest_id,buildPath,user_id,timeStamp){
                              let reportURL =buildPath.replace("uploads/project/testing/","report/")+"report.html";
                              //console.log(unitTest_id);
                              
                              let ele = `
                              <li>
                              <div class="col1">
                                    <div class="cont">
                                    <div class="cont-col1">
                                          <div class="label label-sm label-info"><i class="fa fa-check"></i></div>
                                    </div>
                                    <div class="cont-col2">
                                          <div class="desc"><span style="font-size:10px">Project : </span>${projectname}<br> <span onClick="openReport('${unitTest_id}','${projectname}','${isAudit}','${reportURL}')" class="label label-sm label-warning sidebarbadges" >report page<i class="fa fa-share"></i></span>
                                          ${isAudit? `<br><span onClick="openInNewTab('${reportURL}')" class="label label-sm label-danger sidebarbadges">Audited Page<i class="fa fa-share"></i></span>
                                          </div>`:""}
                                          
                                    </div>
                                    </div>
                              </div>
                              <div class="col2" style="float:right">
                                    <div class="date" style="font-size:.8em"> ${timeDifference(moment(),new Date(timeStamp).getTime() )}</div>
                              </div>
                              </li>
                              `;

                                   $(ele).appendTo($('.list-items'));


                  }
                  function openInNewTab(url) {
                        var win = window.open(url, '_blank');
                        win.focus();
                  }
                  let clearSidebar= function(){
                        $('.list-items').empty();
                  }
                  let openReport = function(build_id,proj,isAudit,reportURL){

                                    // debounce 500 ms
                                   if(timer) clearTimeout(timer);
                                    timer = setTimeout(function(){

                                     //dom manipulate 
                                    $('#tab1').removeClass('active');
                                    $('#tab4').addClass('active');
                                    $(".nav-pills").addClass("hidden");
                                    $("#bar").addClass("hidden");
                                    $("#titePage").text("Project: "+proj);
                                    $('#btncontinue').addClass("hidden");
                                    //hide feeds
                                    $('.page-quick-sidebar-toggler').click();
                             
                                                console.log(isAudit);
                                                if(isAudit=="true"){
                                                      //select audit mode
                                                      
                                                      $('#Audit').attr("src",reportURL);
                                                      $('#Audit_port').css("visibility", "visible");
                                                      
                                                }
                                                else{
                                                      $('#Audit_port').css("visibility", "hidden");
                                                      $('#Audit').css("display", "none");
                                                      $('#btnToAudit').addClass("hidden");
                                                }

                                    LoadAllGraph(build_id);
                                    }, 500);

                  }
                        //temp	
                  function newDate(days) {
                        return moment().add(days, 'd').toDate();
                  }

                  function newDateString(days) {
                        return moment().add(days, 'd').format();
                  }
 
                  // FirebaseUI config. for auth login

                    // Initialize Firebase
                        var config = {
                        apiKey: "AIzaSyA1uuiJ-E6DVegxReKrpMD5zNiWZfMVcIw",
                        authDomain: "telexi-5888d.firebaseapp.com",
                        databaseURL: "https://telexi-5888d.firebaseio.com",
                        projectId: "telexi-5888d",
                        storageBucket: "telexi-5888d.appspot.com",
                        messagingSenderId: "861459487613"
                        };
                        firebase.initializeApp(config);

                  var uiConfig = {
                        signInOptions: [
                        // Leave the lines as is for the providers you want to offer your users.
                        firebase.auth.EmailAuthProvider.PROVIDER_ID
                  
                        ],signInSuccessUrl:'/'


                        , callbacks: {
                        signInSuccessUrl: function(currentUser, credential, redirectUrl){

                              unblur();
                              return true;
                              }

                        },
                        // Terms of service url.
                        tosUrl: '/'
                  };
                  // Initialize the FirebaseUI Widget using Firebase.
                  var ui = new firebaseui.auth.AuthUI(firebase.auth());
                  // The start method will wait until the DOM is loaded.


                  ////////////////
                  // global var
                  ///////////////
                  let _Username ;
                  
                  firebase.auth().onAuthStateChanged(function(user) {
                        if (!user) { 
                        // not login , show login, register modal
                              blur();
                              ui.start('#firebaseui-auth-container', uiConfig)
                        }
                        else{
                              //This account is Loggged, tell state to firebase
                             // $('#avatarText').text(user.displayName + " : "+  user.email);
                              // set ref() path to user status of user 
                          
                              var amOnline = firebase.database().ref(".info/connected");
                              var userRef = firebase.database().ref("presence/" + user.displayName+"/state");


                              //listener on user connect,disconnect
                              amOnline.on('value', function(snapshot) {
                              if (snapshot.val()) {
                              //on quit  set to offline
                              userRef.onDisconnect().set("Offline");
                              //on normal (connected) set to Online
                              userRef.set("Online");

                              _Username = user.displayName;
                              $('list-heading').text("Username: "+_Username);
                              fetchUserReports(_Username);

                              con = $('#NAME')
                               con.text(_Username);
                              unblur();
                              }
                              });
                              }
                  });

                  let blur = function(){
                               let con = $('#mainContainer');
                               con.addClass("blur");
                               con = $('#pageHeader')
                               con.addClass("blur");
                  }
                  let unblur = function(){
                              let con = $('#mainContainer');
                               con.removeClass("blur");
                               con = $('#pageHeader')
                               con.removeClass("blur");
                               
                  }
                  function timeDifference(current, previous) {

                        var msPerMinute = 60 * 1000;
                        var msPerHour = msPerMinute * 60;
                        var msPerDay = msPerHour * 24;
                        var msPerMonth = msPerDay * 30;
                        var msPerYear = msPerDay * 365;

                        var elapsed = current - previous;

                        if (elapsed < msPerMinute) {
                              return Math.round(elapsed/1000) + ' seconds ago';   
                        }

                        else if (elapsed < msPerHour) {
                              return Math.round(elapsed/msPerMinute) + ' minutes ago';   
                        }

                        else if (elapsed < msPerDay ) {
                              return Math.round(elapsed/msPerHour ) + ' hours ago';   
                        }

                        else if (elapsed < msPerMonth) {
                              return 'approximately ' + Math.round(elapsed/msPerDay) + ' days ago';   
                        }

                        else if (elapsed < msPerYear) {
                              return 'approximately ' + Math.round(elapsed/msPerMonth) + ' months ago';   
                        }

                        else {
                              return 'approximately ' + Math.round(elapsed/msPerYear ) + ' years ago';   
                        }
                        }


                                          