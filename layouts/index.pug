doctype html
html
      include partials/header.pug
      include partials/navbar.pug
      include home.pug
      #codeBuild-controller.portlet.light.tasks-widget.bordered
             | 
             .btn.red(style="margin: 4px;") Stop
                  i.fa.fa-stop
             | 00:22 seconds
      link(rel='stylesheet', type='text/css', href='public/js/loading-bar.css')
      block script
            script(src='public/assets/global/plugins/select2/js/select2.full.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/jquery-validation/js/jquery.validate.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/jquery-validation/js/additional-methods.min.js', type='text/javascript')
            script(src='public/assets/global/plugins/bootstrap-wizard/jquery.bootstrap.wizard.min.js', type='text/javascript')
            script(src='public/assets/pages/scripts/form-wizard.min.js', type='text/javascript')
            script(src='public/js/dropzone.js', type='text/javascript')
            script(src="public/assets/global/plugins/codemirror/lib/codemirror.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/javascript/javascript.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/htmlmixed/htmlmixed.js" type="text/javascript")
            script(src="public/assets/global/plugins/codemirror/mode/css/css.js" type="text/javascript")
            script(type='text/javascript', src='public/js/loading-bar.js')
            script.
                  let _file;
                  let source;
                  Dropzone.options.myAwesomeDropzone = {
                        dictDefaultMessage: "or click here ",
                        autoQueue: true,
                        autoDiscover: false,
                        acceptedFiles: ".zip",
                        init: function() {
                              myDropzone = this; // closure
                              this.on("addedfile", function(file) { 
                                    if (this.files[1]!=null){
                                          this.removeFile(this.files[0]);
                              }
                                    

                              });
                              this.on("sending", function(file, xhr, formData) {
                              
                                    formData.append("id", "uid1");
                                    formData.append("proj", $('#projname').val()+"");

                                    let service = '1,0,0' ; //$('#checkboxNodeJS').val();
                                    formData.append("service", service);

                                    console.log(formData);

                               });


                               this.on("success", function(file,res) {
                                    source = new EventSource("/api/build/"+res.toString());
                                    $('#isupload').val(res);
                                    $('#btncontinue').click();
                                    $('#btncontinue').attr("style","visibility:hidden");
                                    $('#btnback').attr("style",'visibility:hidden');

                                     source.addEventListener('console', function (result) {
                                          buildConsoleLog(result.data,'console');
                                    });

                                     source.addEventListener('err', function (result) {
                                          buildConsoleLog(`<br><br>################################################<br>
                                                            " ${result.data}<br>################################################`,'error');
                                    });
                                     source.addEventListener('end', function (result) {
                                          buildConsoleLog(`<br><br>################################################<br>
                                                            " ${result.data}<br>################################################`,'end');

                                    });
                               });
                               this.on("uploadprogress",function(file, progress, bytesSent) {
                                
                             
                              });

                        },

                        uploadMultiple: false,
                        paramName: "file", // The name that will be used to transfer the file
                        maxFilesize: 50, // MB

                  };
                   var loadTimer,build;
                  $(function() {
                        $('#codeBuild-controller').bind( "click", function() {
                          alert( "User clicked on stop'" );
                        });
                         
                         var i = 0;
                         build = $('#builder');

                         loadTimer = setInterval(function () {
                              (i==4)? i=0: i++;
                              if(build.text().length>13){
                                    build.text("Building");
                              }
                              build.text(build.text()+".");
                              
                              var lasted = $('#builder');
                             
                        }, 1000);
                           
                  });


                  let buildConsoleLog = function(data,state){
                        //show controller 
                        $('#codeBuild-controller').css("visibility", "visible");
                        let  c1 = document.createElement("div");
                        c1.className = "prompt";
                        let d= new Date();
                        c1.innerHTML =`worker@${addZero(d.getHours())}:${addZero(d.getMinutes())}:${addZero(d.getSeconds())} $  `;
                        let  cmd = document.createElement("span");

                        switch(state){
                              case 'console': cmd.setAttribute("style","color:#32c146;");
                              break;
                              case 'error':  cmd.setAttribute("style","color:#d73a49;padding-top:20px");  
                              break;
                              case 'end': 
                                    c1.innerHTML ="";
                                    cmd.setAttribute("style","color:#FFFFF;padding-top:20px");  
                                    clearInterval(loadTimer);
                                    build.text("Build Finished");
                                    $('.bufferload').attr("style","display:none;");
                                    $('#btncontinue').attr("style","visibility:visible");
                              break;

                        }


                        //cmd.className = "error";
                        cmd.innerHTML = (data).toString().replace(/"/g,"");
                        c1.appendChild(cmd);
                              
                        $('.codein_body').append(c1);

                  }

                  function addZero(i) {
                        if (i < 10) {
                              i = "0" + i;
                        }
                        return i;
                        }

                 
